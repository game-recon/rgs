extern crate std;

extern crate rgs_models as models;

use errors::Error;
use protocols::helpers;
use protocols::models as pmodels;
use std::str::FromStr;
use util;

fn parse_data(buf: &Vec<u8>) -> Result<Vec<std::net::IpAddr>, Error> {
    let data = vec![];
    Ok(data)
}

#[cfg(test)]
mod tests {
    use super::*;

    fn fixtures() -> (Vec<u8>, Vec<std::net::SocketAddr>) {
        let data = vec![0x42, 0x00, 0x07, 0x01, 0x0A, 0x00, 0x4A, 0xD0, 0x4B, 0xB7, 0x8B, 0x0F,
                        0xAC, 0xF9, 0xB0, 0x91, 0x8B, 0x0F, 0x53, 0xC7, 0x18, 0x16, 0x8B, 0x0F,
                        0x3E, 0x8F, 0x2E, 0x44, 0x8B, 0x0F, 0x79, 0x2A, 0xA0, 0x97, 0x3E, 0x0F,
                        0x5C, 0xDE, 0x6E, 0x7C, 0x8B, 0x0F, 0x6C, 0x34, 0xE4, 0x4C, 0x8B, 0x0F,
                        0xB2, 0xEB, 0xB2, 0x57, 0x8B, 0x0F, 0x80, 0x48, 0x4A, 0x71, 0x8B, 0x0F,
                        0x40, 0x8A, 0xE7, 0x36, 0x8B, 0x0F, 0x42, 0x00, 0x07, 0x01, 0x01, 0x00,
                        0x4A, 0xD0, 0x4B, 0xB7, 0x8C, 0x0F];
        let srv_list = vec![std::net::SocketAddr::from_str("74.208.75.183:3979").unwrap()];

        (data, srv_list)
    }


}
